/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include <xil_io.h>
#include "xparameters.h"
#include "xscugic.h"
#include <stdlib.h>

XScuGic Interrupt;
XScuGic_Config *IntCfg;

// Check the status of a setup function
int Check(int status)
{
	if (status != XST_SUCCESS)
	{
		return XST_FAILURE;
	}
	return XST_SUCCESS;
}

// Initialize the AXI DMA
void initializeDMA(void)
{
	unsigned int temp;

	temp = Xil_In32(XPAR_AXI_DMA_0_BASEADDR + 0x30); //read data from memory
	temp = temp | 0x1001;	// enable DMA and interrupt on complete
	Xil_Out32(XPAR_AXI_DMA_0_BASEADDR + 0x30, temp); //write altered data back into memory
	xil_printf("DMA control register has a value of : %x\n\r", temp);
}

void DMATransfer( unsigned int destAddress, unsigned int length)
{
	// Write starting address to the DMA starting address register
	Xil_Out32(XPAR_AXI_DMA_0_BASEADDR + 0x48, destAddress);

	// Write the length of the data (in Bytes) that will go into the DRAM into the DMA register
	Xil_Out32(XPAR_AXI_DMA_0_BASEADDR + 0x58, length);	// Triggers the transfer
}

// DMA Transfer when an interrupt occurs
void InterruptHandler(void)
{
	u32 temp;

	//Clear interrupt
	temp =  Xil_In32(XPAR_AXI_DMA_0_BASEADDR + 0x34);
	temp = temp | 0x10000;
	Xil_Out32(XPAR_AXI_DMA_0_BASEADDR + 0x34, temp);

	//Initialize the DMA data transfer
	DMATransfer(0xa0000000, 16);
}

/* Initialize the interrupt system
 * Parameters in all caps come from the xparameters header file that is created from the hardware
 */
int initializeInterrupt(void)
{
	int status;

	//Lookup device ID pointer
	IntCfg = XScuGic_LookupConfig(XPAR_PS7_SCUGIC_0_DEVICE_ID);
	if (NULL == IntCfg)
	{
		return XST_FAILURE;											//Verify the pointer was looked up successfully
	}

	/*Initialize the configuration with the instance variable, address pointer, and base address in virtual memory to
	  match it to its physical address */
	status = XScuGic_CfgInitialize(&Interrupt, IntCfg, IntCfg -> CpuBaseAddress);
	Check(status);													//Verify the interrupt configuration was successful

	//Register an interrupt to the interrupt instance previously setup
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT, (Xil_ExceptionHandler) XScuGic_InterruptHandler, &Interrupt);
	Xil_ExceptionEnable();											//Enable the interrupt exception

	//Create the connection between the interrupt source and the handler that is run when an interrupt from this source occurs
	status = XScuGic_Connect(&Interrupt, XPAR_FABRIC_AXI_DMA_0_S2MM_INTROUT_INTR, (Xil_ExceptionHandler)InterruptHandler, NULL);
	Check(status);													//Verify the interrupt was connected properly

	//Enable the interrupt source
	XScuGic_Enable(&Interrupt, XPAR_FABRIC_AXI_DMA_0_S2MM_INTROUT_INTR);

}

int main()
{
	char *ptr;

    init_platform();

    // enable the DMA and interrupt
    initializeDMA();

    // Setup the interrupt and specify actions the execute when the interrupt occurs
    initializeInterrupt();

	//ptr = (char*)malloc(256);			// Allocate a memory location for the data
    xil_printf("Enter a character.");
    getchar();
	DMATransfer(0xa0000000, 16);
	Xil_Out32(XPAR_PS7_GPIO_0_BASEADDR, 1);						// Start collecting data
	//xil_printf("The data was sent to %p", ptr);

    return 0;
}
